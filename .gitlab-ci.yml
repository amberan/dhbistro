#TODO auto tagging

# stages:
#   - install
#   - lint

# variables:
#   # Set the default PHP version to be used by all jobs
#   PHP_VERSION: "8.1"

# cache:
#   key: ${CI_COMMIT_REF_SLUG}
#   paths:
#     - vendor/

# # Step 1: Install dependencies
# install_dependencies:
#   stage: install
#   image: "php:${PHP_VERSION}-cli"
#   script:
#     - apt-get update && apt-get install -y git unzip
#     - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
#     - composer install --prefer-dist --no-progress --no-suggest

#   artifacts:
#     paths:
#       - vendor/

# # Step 2: Run PHPStan for static analysis
# phpstan:
#   stage: lint
#   image: "php:${PHP_VERSION}-cli"
#   script:
#     - vendor/bin/phpstan analyse src --level max
#   dependencies:
#     - install_dependencies
#   allow_failure: false
#   # Only run on specific branches if needed
#   only:
#     - main
#     - develop
#     - merge_requests

# # Step 3: Run ECS for coding standards and fixing issues
# ecs:
#   stage: lint
#   image: "php:${PHP_VERSION}-cli"
#   script:
#     - vendor/bin/ecs check src --fix
#   dependencies:
#     - install_dependencies
#   allow_failure: false
#   only:
#     - main
#     - develop
#     - merge_requests

# # Step 4: Run PHPCS for coding standards enforcement
# phpcs:
#   stage: lint
#   image: "php:${PHP_VERSION}-cli"
#   script:
#     - vendor/bin/phpcs src
#   dependencies:
#     - install_dependencies
#   allow_failure: false
#   only:
#     - main
#     - develop
#     - merge_requests




# .gitlab-ci.yml documentation: https://docs.gitlab.com/ee/ci/yaml/gitlab_ci_yaml.html
# Code-Quality documentation: https://docs.gitlab.com/ee/ci/testing/code_quality.html
# Static Application Security Testing documentation: https://docs.gitlab.com/ee/user/application_security/sast/
# SAST example https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/SAST.gitlab-ci.yml

include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
variables:
  SAST_EXPERIMENTAL_FEATURES: "true"
  SAST_DEFAULT_ANALYZERS: "phpcs-security-audit"
  SAST_EXCLUDED_PATHS: "vendor, js/jquery*, js/tiny*"
  SEARCH_MAX_DEPTH: 10
  TEST_FOLDER: "~/cz.prazskahlidka.test.nh/  ~/cz.prazskahlidka.test.dh/" # ~/cz.prazskahlidka.test.i/'
  PROD_FOLDER: "~/cz.prazskahlidka.nhbistro/  ~/cz.prazskahlidka.dhbistro/" # ~/cz.prazskahlidka.ibistro'
cache:
  paths:
    - source/vendor/
image: alpine

stages:
- build
- test
- deploy

######################################################## BUILD

#TODO one job for changing Debugger, one job for `build`

build_test:
  stage: build
  interruptible: true
  before_script:
  - apk add gzip
  - apk add composer
  script:
  - cd source
  - find . -type f -name \*.php -exec sed -i -r 's+Debugger::(DETECT|PRODUCTION)+Debugger::DEVELOPMENT+g' {} \;
  - composer install --ignore-platform-reqs
  - tar czf bistro-$CI_PIPELINE_ID.tgz --exclude bistro.tmp .
  artifacts:
    paths:
    - source/bistro-$CI_PIPELINE_ID.tgz
    expire_in: 1 days
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != "master"
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never

build_prod:
  stage: build
  before_script:
  - apk add gzip
  - apk add composer
  script:
  - cd source
  - find . -type f -name \*.php -exec sed -i -r 's+Debugger::(DETECT|DEVELOPMENT)+Debugger::PRODUCTION+g' {} \;
  - composer install --ignore-platform-reqs
  - tar czf bistro-$CI_PIPELINE_ID.tgz --exclude bistro.tmp .
  artifacts:
    paths:
    - source/bistro-$CI_PIPELINE_ID.tgz
    expire_in: 1 days
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"

######################################################## TEST

#TODO moved all configs to .quailty
#TODO checking *php without vendor/
#TODO PHPStan --error-format=gitlab

code_quality:
  interruptible: true
  allow_failure: true
  rules:
    - if: $CODE_QUALITY_DISABLED
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - '**/*.php'
      when: manual

phpcs-security-audit-sast:
  interruptible: true
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # Run code quality job in merge request pipelines
      exists:
        - '**/*.php'

semgrep-sast:
  interruptible: true
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" # Run code quality job in merge request pipelines
      when: manual
      exists:
        - '**/*.php'

######################################################## DEPLOY

# TODO generic script for params for selecting folder/platform -> move to one step

deploy_test:
  resource_group: testing
  stage: deploy
  needs:
    - build_test
  allow_failure: true
  before_script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - cat $TEST_SSH | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan alembiq.net >> ~/.ssh/known_hosts
  script:
    - scp source/bistro-$CI_PIPELINE_ID.tgz prazskahlidka@alembiq.net:.
    - for folder in ${TEST_FOLDER} ;
      do
        ssh $TEST_REMOTE "mkdir $folder/$CI_PIPELINE_ID
        && tar zxf bistro-$CI_PIPELINE_ID.tgz -C $folder/$CI_PIPELINE_ID/
        && cp $folder/htdocs/.env.php $folder/$CI_PIPELINE_ID/
        && rsync -au --remove-source-files $folder/htdocs/files/ $folder/$CI_PIPELINE_ID/files/
        && tar zcf $folder/backup-$CI_PIPELINE_ID.tgz --exclude $folder/htdocs/cache --exclude $folder/htdocs/.git $folder/htdocs/
        && mv $folder/htdocs $folder/backup
        && mv $folder/$CI_PIPELINE_ID $folder/htdocs
        && rm -rf $folder/backup" ;
      done
    - ssh $TEST_REMOTE "rm bistro-$CI_PIPELINE_ID.tgz"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != "master"
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never

deploy_prod:
  resource_group: production
  stage: deploy
  needs:
    - build_prod
  allow_failure: true
  before_script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - cat $PROD_SSH | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan alembiq.net >> ~/.ssh/known_hosts
  script:
    - scp source/bistro-$CI_PIPELINE_ID.tgz prazskahlidka@alembiq.net:.
    - for folder in ${PROD_FOLDER} ;
      do
        ssh $PROD_REMOTE "mkdir $folder/$CI_PIPELINE_ID
        && tar zxf bistro-$CI_PIPELINE_ID.tgz -C $folder/$CI_PIPELINE_ID/
        && cp $folder/htdocs/.env.php $folder/$CI_PIPELINE_ID/
        && rsync -au --remove-source-files $folder/htdocs/files/ $folder/$CI_PIPELINE_ID/files/
        && tar zcf $folder/backup-$CI_PIPELINE_ID.tgz --exclude $folder/htdocs/cache --exclude $folder/htdocs/.git $folder/htdocs/
        && mv $folder/htdocs $folder/backup
        && mv $folder/$CI_PIPELINE_ID $folder/htdocs
        && rm -rf $folder/backup" ;
      done
    - ssh $PROD_REMOTE "rm bistro-$CI_PIPELINE_ID.tgz"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
