stages:
  - test 
  - staging

code_quality-html:
  #https://gitlab.com/frakman1/codeclimate-test/blob/master/.gitlab-ci.yml
  stage: test
  image: docker:stable
  allow_failure: true
  services:
    - docker:stable-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/security-products/codequality:0.85.6"
  script:
    - |
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
    - docker run
        --env CONTAINER_TIMEOUT_SECONDS=1800
        --env CODECLIMATE_CODE="$PWD" 
        --env CODECLIMATE_DEBUG=0
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        --volume /tmp/cc:/tmp/cc 
       codeclimate/codeclimate:0.85.6 analyze -f html > report.html
  artifacts:
    paths: [report.html]
    expire_in: 10 weeks
  dependencies: []
  only:
    - merge_requests
    - web
  except:
    variables:
      - $CODE_QUALITY_DISABLED

code_quality:
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --env CODECLIMATE_DEBUG=0
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  only:
    - merge_requests
    - web
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
#    paths: [gl-code-quality-report.json]
    expire_in: 10 weeks

#static_analysis:
#  stage: test
#  image: php:7.2-fpm
#  before_script:
#    - wget https://github.com/phpstan/phpstan/releases/download/0.11.19/phpstan.phar -O bin/phpstan.phar
#  script:
#    - php bin/phpstan.phar --error-format gitlab  analyse src --level=1



test to bistro.alembiq.net:
  image: debian:latest
  stage: test
  before_script: 
    - DEBIAN_FRONTEND="noninteractive"
    - 'which ssh-agent || ( apt update -y && apt install openssh-client -y )'
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh
    - ssh-keyscan $CI_ENVIRONMENT_URL >> ~/.ssh/known_hosts
    - chmod 600 ~/.ssh/known_hosts
  script:
    - echo "Deploy to staging $URL"
    - chmod 600 $SSH_KEY
    - cat $SSH_KEY | tr -d '\r' | ssh-add -
    - export
    - ssh gitlab-ci@$CI_ENVIRONMENT_URL "cd /srv/net.alembiq.bistro/htdocs && git remote add  -f $CI_COMMIT_SHA $CI_REPOSITORY_URL && git pull $CI_COMMIT_SHA $CI_COMMIT_BRANCH && exit"
  environment:
    name: staging
    url: bistro.alembiq.net
  only: 
    - merge_requests
    - web
    - master




deploy to bistro.alembiq.net:
  image: debian:latest
  stage: staging
  before_script: 
    - DEBIAN_FRONTEND="noninteractive"
    - 'which ssh-agent || ( apt update -y && apt install openssh-client -y )'
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh
    - ssh-keyscan $CI_ENVIRONMENT_URL >> ~/.ssh/known_hosts
    - chmod 600 ~/.ssh/known_hosts
  script:
    - echo "Deploy to staging $URL"
    - chmod 600 $SSH_KEY
    - cat $SSH_KEY | tr -d '\r' | ssh-add -
    - export
    - ssh gitlab-ci@$CI_ENVIRONMENT_URL "cd /srv/net.alembiq.bistro/htdocs && git pull origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME && exit"
  environment:
    name: staging
    url: bistro.alembiq.net
  only: 
    - merge_requests
    - web
    - master

